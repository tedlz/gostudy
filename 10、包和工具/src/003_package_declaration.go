package main

// 003、包声明
func main() {

}

// 在每个 Go 语言源文件的开头都必须有包声明语句
// 包声明语句的主要目的是，确定当前包被其它包导入时默认的标识符（也称为包名）

// 例如，math/rand 包的每个源文件开头都包含 package rand 包声明语句，
// 所以当你导入这个包，你就可以用 rand.Int、rand.Float64 类似的方式访问包的成员

// package main
//
// import (
// 	   "fmt"
// 	   "math/rand"
// )
//
// func main() {
// 	   fmt.Println(rand.Int())
// }

// 通常来说，默认的包名就是包导入路径名的最后一段
// 因此即使两个包的路径不同，它们依然可能有一个相同的包名
// 例如，math/rand 包和 crypto/rand 包的包名都是 rand
// 稍后我们将看到如何同时导入两个有相同包名的包

// 关于默认包名，一般采用导入路径名的最后一段的约定也有三种例外情况：

// 第一个例外，包对应一个可执行程序，也就是 main 包，这时候 main 包本身的导入路径是无关紧要的
// 名字为 main 的包是给 go build（10.7.3 节）构建命令的一个信息，这个包编译完之后必须调用连接器生成一个可执行程序

// 第二个例外，包所在的目录中，可能有一些文件名是以 _test.go 为后缀的 Go 源文件
// （译注：前面必须有其它字符，因为以 _ 或 . 开头的源文件会被构建工具忽略），并且这些源文件声明的包名也是以 _test 为后缀名的
// 这种目录可以包含两种包：一种是普通包，另一种则是测试的外部扩展包
// 所有以 _test 为后缀包名的外部扩展包都由 go test 命令独立编译，普通包和测试的外部扩展包是相互独立的
// 测试的外部扩展包一般用来避免测试代码中的循环导入依赖，具体细节我们将在 11.2.4 节中介绍

// 第三个例外，一些依赖版本号的管理工具会在导入路径后追加版本号信息，例如 gopkg.in/yaml.v2
// 这种情况下包的名字并不包含版本号后缀，而是 yaml
