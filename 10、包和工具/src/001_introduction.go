package main

// 001、包简介
func main() {
	// 现在随便一个小程序的实现都可能包含超过 10000 个函数
	// 然而作者只需要考虑其中很小的一部分和做很少的设计，因为绝大部分代码都是由他人编写的，它们通过类似包或模块的方式被重用

	// Go 语言有超过 100 个的标准包（译注：可用 go list std | wc -l 命令查看标准包的具体数目）（目前 199）
	// 标准库为大多数程序提供了基础构建
	// 在 Go 的社区，有很多成熟的包被设计、共享、重用和改进，目前互联网上已经发布了非常多的 Go 语言开源包，
	// 它们可以通过 https://godoc.org 检索
	// 在本章，我们将演示如何使用已有的包和创建新的包

	// Go 还自带了工具箱，里面有很多用来简化工作区和包管理的小工具
	// 在本书开始的时候，我们已经见识过如何使用工具箱自带的工具来下载、构建和运行我们的演示程序了
	// 在本章，我们将看看这些工具的基本设计理论和尝试更多的功能，例如打印工作区中包的文档和查询相关的元数据等
	// 在下一章，我们将探讨 testing 包的单元测试用法

	// 任何包系统设计的目的都是为了简化大型程序的设计和维护工作，通过将一组相关的特性放进一个独立的单元以便于理解和更新
	// 在每个单元更新的同时保持程序中其它单元相对的独立性
	// 这种模块化的特性允许每个包可以被其它的不同项目共享和重用，在项目范围内，甚至全球范围的统一分发和复用

	// 每个包一般都定义了一个不同的名字空间用于它内部的每个标识符的访问
	// 每个名字空间关联到一个特定的包，让我们给类型、函数等选择简短明了的名字，
	// 这样可以在使用它们的时候，减少和其它部分名字的冲突

	// 每个包还通过控制包内名字的可见性和是否导出来实现封装特性
	// 通过限制包成员的可见性并隐藏包中 API 的具体实现，将允许包的维护者在不影响外部包用户的前提下调整包的内部实现
	// 通过限制包内变量的可见性，还可以强制用户通过某些特定函数来访问和更新内部变量，
	// 这样可以保证内部变量的一致性和并发时的互斥约束

	// 当我们修改了一个源文件，我们必须重新编译该源文件对应的包和所有依赖该包的其它包
	// 即使是从头构建，Go 语言编译器的编译速度也明显快于其它编译语言
	// Go 语言闪电般的编译速度主要得益于三个语言特性：
	// 第一，所有导入的包必须在每个文件的开头显式声明，这样的话编译器就没有必要读取和分析整个源文件来判断包的依赖关系
	// 第二，禁止包的环装依赖，因为没有循环依赖，包的依赖关系形成一个有向无环图，每个包可以被独立编译且很可能被并发编译
	// 第三，编译后包的目标文件不仅仅记录包本身的导出信息，目标文件同时还记录了包的依赖关系
	// 因此，在编译一个包的时候，编译器只需要读取每个直接导入包的目标文件，而不需要遍历所有依赖的文件
	// （译注：很多都是重复的间接依赖）
}
