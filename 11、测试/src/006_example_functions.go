package main

// 006、示例函数
func main() {

}

// 第三种被 go test 特别对待的函数是示例函数：

// func ExampleIsPalindrome() {
//     fmt.Println(IsPalindrome("A man, a plan, a canal: Panama"))
//     fmt.Println(IsPalindrome("palindrome"))
// *   // Output:
// *   // true
// *   // false
// }

// 示例函数有三个用处
// 最主要的一个是作为文档：一个包的例子可以更简洁直观的方式来演示函数的用法
// 比文字描述更直接易懂，特别是作为一个提醒或快速参考时
// 一个示例函数也可以方便展示属于同一个接口的几种类型或函数之间的关系，
// 所有的文档都必须关联到一个地方，就像一个类型或函数声明都统一到包一样
// 同时，示例函数和注释并不一样，示例函数是真实的 Go 代码，需要接受编译器的编译时检查，
// 这样可以保证源代码更新时，示例代码不会脱节

// 根据示例函数的后缀名部分，godoc 这个 web 文档服务器会将示例函数关联到某个具体函数或包本身，
// 因此 ExampleIsPalindrome 示例函数将是 IsPalindrome 函数文档的一部分，Example 示例函数将是包文档的一部分

// 示例函数的第二个用处是，在 go test 执行测试的时候也会运行示例函数测试
// 如果示例函数内含有类似上面例子中的 // Output: 格式的注释，那么测试工具会执行这个示例函数，
// 然后检查示例函数的标准输出与注释是否匹配

// 示例函数的第三个目的是提供一个真实的演练场
// https://golang.org 就是由 godoc 提供的文档服务，它使用了 Go Playground 让用户可以在浏览器中在线编辑和运行每个示例函数
// 这通常是学习函数使用或 Go 语言特性最快捷的方式

// 本书最后两章是讨论 reflect 和 unsafe 包，一般的 Go 程序员很少使用它们，事实上也很少需要用到
// 因此，如果你还没有写过任何真实的 Go 程序的话，现在可以先去写些代码了
