package main

// 006、几点忠告
func main() {
	// 我们在前一章结尾的时候，我们警告要谨慎使用 reflect 包。那些警告同样适用于本章的 unsafe 包

	// 高级语言使得程序员不用再关心真正运行程序的指令细节，同时也不再需要关注许多如内存布局之类的实现细节
	// 因为高级语言这个绝缘的抽象层，我们可以编写安全健壮的，并且可以运行在不同操作系统上的具有高度可移植性的程序

	// 但是 unsafe 包，它让程序员可以透过这个抽象的绝缘层直接使用一些必要的功能，虽然可能是为了获得更好的性能
	// 但是代价就是牺牲了可移植性和程序安全，因此使用 unsafe 包是一个危险的行为
	// 我们对何时以及如何使用 unsafe 包的建议和我们在 11.5 节提到的 Knuth 对过早优化的建议类似
	// 大多数 Go 程序员可能永远不会需要直接使用 unsafe 包
	// 当然，也永远都会有一些需要使用 unsafe 包实现会更简单的场景
	// 如果确实认为使用 unsafe 包是最理想的方式，那么应该尽可能将它限制在较小的范围，这样其它代码就可以忽略 unsafe 的影响

	// 现在，赶紧将最后两章抛入脑后吧，编写一些实实在在的应用是真理
	// 请远离 reflect 和 unsafe 包，除非你确实需要它们

	// 最后，用 Go 快乐地编程，我们希望你能像我们一样喜欢 Go 语言
}
