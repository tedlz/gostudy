package main

// 001、底层编程
func main() {
	// Go 语言的设计包含了诸多安全策略，限制了可能导致程序运行出错的用法
	// 编译时类型检查可以发现大多数类型不匹配的操作，例如两个字符串做减法的错误
	// string、map、slice 和 chan 等所有的内置类型，都有严格的类型转换规则

	// 对于无法静态检测到的错误，例如数组访问越界或使用空指针，
	// 运行时动态检测可以保证程序在遇到问题的时候立即终止并打印相关的错误信息
	// 自动内存管理（垃圾内存自动回收）可以消除大部分野指针和内存泄露相关的问题

	// Go 语言的实现刻意隐藏了很多底层细节
	// 我们无法知道一个结构体真实的内存布局，也无法获取运行时函数对应的机器码，
	// 也无法知道当前的 goroutine 运行在哪个操作系统线程之上
	// 事实上，Go 语言的调度器会自己决定是否需要将某个 goroutine 从一个操作系统线程转移到另一个操作系统线程
	// 一个指向变量的指针也并没有展示变量的真实地址，因为垃圾回收器可能会根据需要移动变量的内存位置，
	// 当然变量对应的地址也会被自动更新

	// 总的来说，Go 语言的这些特性使得 Go 程序相比较低级的 C 语言来说更容易预测和理解，程序也不容易崩溃
	// 通过隐藏底层的实现细节，也使得 Go 语言编写的程序具有高度的可移植性，
	// 因为语言的语义在很大程度上是独立于任何编译器实现、操作系统和 CPU 系统结构的
	// （当然也不是完全绝对独立，如 int 类型就依赖 CPU 机器字的大小、某些表达式求值的具体顺序、还有编译器实现的一些额外限制等）

	// 有时候我们可能会选择放弃部分语言特性而优先选择具有更好性能的方法，例如需要与其它语言编写的库进行互操作，
	// 或者用纯 Go 语言无法实现的某些函数

	// 在本章，我们将展示如何使用 unsafe 包来摆脱 Go 语言规则带来的限制，讲述如何创建 C 语言函数库的绑定，以及如何进行系统调用

	// 本章提供的方法不应该轻易使用
	// 如果没有处理好细节，它们可能导致各种不可预测并且隐晦的错误，甚至连有经验的 C 程序员都无法理解这些错误
	// 使用 unsafe 包的同时也放弃了 Go 语言保证与未来版本的兼容性的承诺，因为它必然会有意无意中使用很多非公开的实现细节，
	// 而这些实现的细节在未来的 Go 语言中很可能会被改变

	// 要注意的是，unsafe 包是一个采用特殊方式实现的包
	// 虽然它可以和普通包一样的导入和使用，但它实际上是由编译器实现的
	// 它提供了一些访问语言内部特性的方法，特别是内存布局相关的细节
	// 将这些特性封装到一个独立的包中，是为在极少数情况下需要使用的时候，同时引起人们的注意（看包的名字 unsafe 就知道是不安全的）
	// 此外，有一些环境因为安全的因素可能限制这个包的使用

	// 不过 unsafe 包被广泛用于比较低级的包，例如 runtime、os、syscall 还有 net 包等
	// 因为它们需要和操作系统密切配合，但是对于普通的程序一般是不需要使用 unsafe 包的
}
